---
# Source: sn-platform/templates/streamnative-console/streamnative-console-configmap.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "test-sn-platform-streamnative-console-init-instance"
  namespace: pulsar
  labels:
    app: sn-platform
    chart: sn-platform-1.5.4
    release: test
    heritage: Helm
    cluster: test-sn-platform
    component: streamnative-console
data:
  init_instance.py: |-
    import requests
    import json
    import os
    host = os.getenv("STREAMNATIVE_CONSOLE_BACKEND_URL")
    loginPath = "/cloud-manager/login"
    username = os.getenv("VAULT_SUPER_USER_NAME")
    password = os.getenv("VAULT_SUPER_USER_PASSWORD")
    if not username or not password:
        username = os.getenv("SUPER_USER_NAME")
        password = os.getenv("SUPER_USER_PASSWORD")
    loginData = {
        "username": username,
        "password": password,
        "type":"pulsar-vault-userpass"
    }
    headers = {
        "Content-Type": "application/json"
    }
    loginResponse = requests.post(url = host + loginPath, data=json.dumps(loginData), headers=headers)
    token = loginResponse.headers['token']
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + token
    }
  
    instanceData = {"name": os.getenv("INSTANCE_NAME"), "broker": os.getenv("WEB_SERVICE_URL")}
    serviceData = {}
    if (os.getenv("KOP_SERVICE_URL")):
        serviceData["kopServiceUrl"] = os.getenv("KOP_SERVICE_URL")
    if (os.getenv("FLINK_SERVICE_URL")):
        serviceData["flinkServiceUrl"] = os.getenv("FLINK_SERVICE_URL")
    instanceData["service"] = json.dumps(serviceData)
  
    instancePath = "/cloud-manager/v1/instances"
    instanceResponse = requests.post(url = host + instancePath, data = json.dumps(instanceData), headers=headers)
    if (instanceResponse.ok and 'Add environment success' in instanceResponse.text):
        print("Add environment success")
    else:
        print("Add environment failed " + instanceResponse.text)
        exit(-1)
